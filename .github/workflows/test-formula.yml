name: Test Formula

on:
  push:
    branches: [main, develop]
    paths:
      - 'Formula/**'
      - '.github/workflows/test-formula.yml'
  pull_request:
    branches: [main]
    paths:
      - 'Formula/**'
      - '.github/workflows/test-formula.yml'
  schedule:
    # Run daily at 06:00 UTC to catch any upstream changes
    - cron: '0 6 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-formula:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]
        exclude:
          # macOS 15 might not be available yet
          - os: macos-15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Homebrew packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /opt/homebrew/var/homebrew/locks
          /usr/local/var/homebrew/locks
        key: ${{ runner.os }}-${{ matrix.os }}-homebrew-${{ hashFiles('Formula/folder2md4llms.rb') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.os }}-homebrew-

    - name: Set up Homebrew environment
      run: |
        echo "::group::Homebrew environment setup"
        # Ensure we have the latest Homebrew
        brew update
        
        # Set environment variables
        export HOMEBREW_NO_INSTALL_FROM_API=1
        export HOMEBREW_NO_AUTO_UPDATE=1
        
        echo "HOMEBREW_NO_INSTALL_FROM_API=1" >> $GITHUB_ENV
        echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
        
        # Show Homebrew version and config
        brew --version
        brew config
        echo "::endgroup::"

    - name: Validate Formula syntax
      run: |
        echo "::group::Formula syntax validation"
        start_time=$(date +%s)
        
        # Create a temporary tap for formula validation
        TAP_NAME="test-folder2md4llms-$(date +%s)"
        echo "Creating temporary tap: $TAP_NAME"
        brew tap-new "$TAP_NAME" --no-git
        
        # Copy formula to temporary tap
        TAP_PATH="$(brew --repository)/Library/Taps/${TAP_NAME/\//-}/homebrew-${TAP_NAME#*/}"
        cp ./Formula/folder2md4llms.rb "$TAP_PATH/Formula/"
        
        # Run audit on the formula
        echo "Running formula audit..."
        brew audit --strict --formula folder2md4llms || {
          echo "::error::Formula audit failed"
          brew untap "$TAP_NAME"
          exit 1
        }
        
        # Clean up temporary tap
        brew untap "$TAP_NAME"
        
        end_time=$(date +%s)
        echo "✅ Syntax validation completed in $((end_time - start_time)) seconds"
        echo "::endgroup::"

    - name: Test Formula installation
      run: |
        echo "::group::Installing formula from source"
        start_time=$(date +%s)
        
        # Install from local formula file
        echo "Starting brew install..."
        brew install --build-from-source --formula ./Formula/folder2md4llms.rb
        
        install_time=$(date +%s)
        echo "✅ Installation completed in $((install_time - start_time)) seconds"
        echo "::endgroup::"

    - name: Verify installation
      run: |
        echo "::group::Verifying installation"
        
        # Check that the binary exists and is executable
        if command -v folder2md >/dev/null 2>&1; then
          echo "✅ folder2md command is available"
        else
          echo "❌ folder2md command not found"
          exit 1
        fi
        
        # Test version command
        VERSION_OUTPUT=$(folder2md --version 2>&1)
        echo "Version output: $VERSION_OUTPUT"
        
        if [[ "$VERSION_OUTPUT" == *"folder2md"* ]]; then
          echo "✅ Version command works"
        else
          echo "❌ Version command failed"
          exit 1
        fi
        
        # Test help command
        folder2md --help >/dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "✅ Help command works"
        else
          echo "❌ Help command failed"
          exit 1
        fi
        
        echo "::endgroup::"

    - name: Test basic functionality
      run: |
        echo "::group::Testing basic functionality"
        
        # Create a test directory with various file types
        mkdir -p test_project/{src,docs,tests}
        echo "print('Hello World')" > test_project/src/main.py
        echo "# Test Project" > test_project/README.md
        echo "# Documentation" > test_project/docs/guide.md
        echo "def test_example(): pass" > test_project/tests/test_main.py
        echo "temporary file" > test_project/temp.tmp
        
        # Test basic folder2md functionality
        cd test_project
        folder2md . --output test_output.md
        
        # Verify output file was created
        if [ ! -f test_output.md ]; then
          echo "❌ Output file test_output.md was not created"
          exit 1
        fi
        
        # Check that the output contains expected content
        if ! grep -q "Hello World" test_output.md; then
          echo "❌ Output file does not contain expected Python code"
          exit 1
        fi
        
        if ! grep -q "Test Project" test_output.md; then
          echo "❌ Output file does not contain expected README content"
          exit 1
        fi
        
        echo "✅ Basic functionality test passed"
        
        # Test ignore file generation
        folder2md --init-ignore --force
        if [ ! -f .folder2md_ignore ]; then
          echo "❌ .folder2md_ignore file was not created"
          exit 1
        fi
        
        echo "✅ Ignore file generation test passed"
        echo "::endgroup::"

    - name: Test configuration file support
      run: |
        echo "::group::Testing configuration file support"
        cd test_project
        
        # Create a config file
        cat > folder2md.yaml << 'EOF'
        output: config_test.md
        exclude_patterns:
          - "*.tmp"
        include_patterns:
          - "*.py"
          - "*.md"
        EOF
        
        # Test with config file
        folder2md . --output config_test.md
        
        # Verify config-based output was created
        if [ ! -f config_test.md ]; then
          echo "❌ Config-based output file was not created"
          exit 1
        fi
        
        # Check basic content is present
        if ! grep -q "Hello World" config_test.md; then
          echo "❌ Config-based output missing expected content"
          exit 1
        fi
        
        echo "✅ Configuration file test passed"
        echo "::endgroup::"

    - name: Run built-in formula tests
      run: |
        echo "::group::Running built-in formula tests"
        start_time=$(date +%s)
        
        # Run tests on the locally installed formula
        brew test folder2md4llms
        
        end_time=$(date +%s)
        echo "✅ Built-in formula tests completed in $((end_time - start_time)) seconds"
        echo "::endgroup::"

    - name: Test uninstallation
      run: |
        echo "::group::Testing uninstallation"
        
        # Uninstall the formula
        brew uninstall folder2md4llms
        
        # Verify the command is no longer available
        if command -v folder2md >/dev/null 2>&1; then
          echo "❌ folder2md command still available after uninstall"
          exit 1
        else
          echo "✅ folder2md command properly removed"
        fi
        
        echo "::endgroup::"

    - name: Cleanup
      if: always()
      run: |
        echo "::group::Cleanup"
        rm -rf test_project || true
        brew uninstall folder2md4llms 2>/dev/null || true
        echo "✅ Cleanup completed"
        echo "::endgroup::"

    - name: Performance summary
      if: always()
      run: |
        echo "::group::Performance Summary"
        echo "### Formula Test Summary for ${{ matrix.os }}"
        echo "- ✅ Formula syntax validation completed"
        echo "- ✅ Formula installation from source completed"
        echo "- ✅ Installation verification completed"
        echo "- ✅ Basic functionality test completed"
        echo "- ✅ Configuration file test completed"
        echo "- ✅ Built-in formula tests completed"
        echo "- ✅ Uninstallation test completed"
        echo ""
        echo "### Platform Information"
        echo "- OS: ${{ matrix.os }}"
        echo "- Homebrew: $(brew --version | head -1)"
        echo "- Architecture: $(uname -m)"
        echo "::endgroup::"