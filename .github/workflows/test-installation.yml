name: Test Installation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to catch upstream changes
    - cron: '0 0 * * 0'

jobs:
  test-installation:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Homebrew packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
        key: ${{ runner.os }}-${{ matrix.os }}-homebrew-folder2md4llms-${{ hashFiles('Formula/folder2md4llms.rb') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.os }}-homebrew-folder2md4llms-
          ${{ runner.os }}-${{ matrix.os }}-homebrew-
    
    - name: Set up Homebrew (Linux)
      if: runner.os == 'Linux'
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo "/home/linuxbrew/.linuxbrew/bin" >> "${GITHUB_PATH}"
    
    - name: Install from local formula
      run: |
        echo "::group::Installing folder2md4llms from local formula"
        start_time=$(date +%s)
        
        # Set environment variable to use local formula instead of API
        export HOMEBREW_NO_INSTALL_FROM_API=1
        
        # Install from local formula file
        echo "Starting brew install..."
        if brew install --build-from-source --formula ./Formula/folder2md4llms.rb; then
          end_time=$(date +%s)
          echo "Installation completed in $((end_time - start_time)) seconds"
          echo "Verifying installation..."
          ls -la $(brew --prefix)/bin/folder2md || true
          which folder2md || true
        else
          echo "Installation failed!"
          echo "Homebrew logs:"
          brew logs folder2md4llms || true
          echo "Available formulas:"
          brew list --formula | head -10
          exit 1
        fi
        echo "::endgroup::"
    
    - name: Test installation and validate dependencies
      run: |
        echo "::group::Testing installation"
        folder2md --version
        folder2md --help
        echo "::endgroup::"
        
        echo "::group::Validating simplified dependencies"
        # Get the installation prefix for the formula
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          FORMULA_PREFIX=$(brew --prefix folder2md4llms)
        else
          FORMULA_PREFIX=/home/linuxbrew/.linuxbrew/opt/folder2md4llms
        fi
        
        # Check installed packages in the virtualenv
        echo "Checking installed packages in virtualenv:"
        "$FORMULA_PREFIX/libexec/bin/pip" list
        
        # Verify core dependencies are present
        echo "Verifying core dependencies are installed:"
        for dep in click pyyaml rich markdown-it-py mdurl pygments; do
          if "$FORMULA_PREFIX/libexec/bin/pip" show "$dep" > /dev/null 2>&1; then
            echo "✅ $dep is installed"
          else
            echo "❌ ERROR: $dep is not installed!"
            exit 1
          fi
        done
        
        # Verify problematic dependencies are NOT installed
        echo "Verifying problematic dependencies are NOT installed:"
        for dep in maturin cryptography rust setuptools-rust; do
          if "$FORMULA_PREFIX/libexec/bin/pip" show "$dep" > /dev/null 2>&1; then
            echo "❌ ERROR: $dep should not be installed in simplified formula!"
            exit 1
          else
            echo "✅ $dep is not installed (as expected)"
          fi
        done
        
        # Count total installed packages (should be minimal)
        TOTAL_PACKAGES=$("$FORMULA_PREFIX/libexec/bin/pip" list --format=freeze | wc -l)
        echo "Total installed packages: $TOTAL_PACKAGES"
        
        # Should have roughly 6 core dependencies + folder2md4llms itself + any transitive deps
        if [ "$TOTAL_PACKAGES" -gt 20 ]; then
          echo "⚠️  WARNING: More packages installed than expected ($TOTAL_PACKAGES). This may indicate dependency creep."
        else
          echo "✅ Package count is reasonable ($TOTAL_PACKAGES packages)"
        fi
        echo "::endgroup::"
    
    - name: Test functionality
      run: |
        echo "::group::Testing basic functionality"
        # Create test directory structure
        mkdir -p test-project/src
        echo "print('hello world')" > test-project/src/main.py
        echo "# Test Project" > test-project/README.md
        
        # Test basic conversion with better error handling
        if ! folder2md test-project --output test-output.md; then
          echo "❌ ERROR: folder2md command failed!"
          echo "Debugging information:"
          echo "- Current directory: $(pwd)"
          echo "- Files in test-project:"
          ls -la test-project/
          echo "- folder2md version:"
          folder2md --version || echo "Version check failed"
          exit 1
        fi
        
        # Verify output file exists and contains expected content
        if [ ! -f test-output.md ]; then
          echo "❌ ERROR: Output file test-output.md was not created!"
          echo "Files in current directory:"
          ls -la
          exit 1
        fi
        
        if ! grep -q "hello world" test-output.md; then
          echo "❌ ERROR: Output file does not contain expected Python code!"
          echo "Content of test-output.md:"
          cat test-output.md
          exit 1
        fi
        
        if ! grep -q "Test Project" test-output.md; then
          echo "❌ ERROR: Output file does not contain expected README content!"
          echo "Content of test-output.md:"
          cat test-output.md
          exit 1
        fi
        
        echo "✅ Basic functionality test passed"
        echo "::endgroup::"
    
    - name: Test ignore file generation
      run: |
        echo "::group::Testing ignore file generation"
        cd test-project
        folder2md --init-ignore
        test -f .folder2md_ignore
        grep -q "node_modules" .folder2md_ignore
        echo "Ignore file generation test passed"
        echo "::endgroup::"
    
    - name: Test with configuration
      run: |
        echo "::group::Testing configuration file"
        # Create config file
        echo "limit: 1000" > test-project/folder2md.yaml
        echo "condense: true" >> test-project/folder2md.yaml
        
        # Test with config
        folder2md test-project --output test-config.md
        test -f test-config.md
        echo "Configuration file test passed"
        echo "::endgroup::"
    
    - name: Test clipboard functionality (macOS only)
      if: runner.os == 'macOS'
      run: |
        echo "::group::Testing clipboard functionality"
        # Test clipboard option
        folder2md test-project --clipboard
        echo "Clipboard functionality test passed"
        echo "::endgroup::"
    
    - name: Test with different file types
      run: |
        echo "::group::Testing different file types"
        mkdir -p test-files
        echo "console.log('hello')" > test-files/script.js
        echo "body { margin: 0; }" > test-files/style.css
        echo "# Header" > test-files/doc.md
        
        folder2md test-files --output multi-type.md
        test -f multi-type.md
        echo "Different file types test passed"
        echo "::endgroup::"
    
    - name: Test with limits
      run: |
        echo "::group::Testing limits functionality"
        # Test character limit
        folder2md test-files --limit 500c --output limited.md
        test -f limited.md
        
        # Test token limit
        folder2md test-files --limit 100t --output token-limited.md
        test -f token-limited.md
        echo "Limits functionality test passed"
        echo "::endgroup::"
    
    - name: Test verbose mode
      run: |
        echo "::group::Testing verbose mode"
        folder2md test-files --verbose --output verbose.md
        test -f verbose.md
        echo "Verbose mode test passed"
        echo "::endgroup::"
    
    - name: Workflow Summary
      if: always()
      run: |
        {
          echo "## Installation Test Summary"
          echo "- ✅ Installation from local formula completed"
          echo "- ✅ Simplified dependencies validation passed"
          echo "- ✅ Basic functionality tests passed"
          echo "- ✅ Ignore file generation test passed"
          echo "- ✅ Configuration file test passed"
          echo "- ✅ Different file types test passed"
          echo "- ✅ Limits functionality test passed"
          echo "- ✅ Verbose mode test passed"
          echo ""
          echo "### Key Validations"
          echo "- ✅ Core dependencies only (click, pyyaml, rich, markdown-it-py, mdurl, pygments)"
          echo "- ✅ No problematic dependencies (maturin, cryptography, rust, setuptools-rust)"
          echo "- ✅ Minimal package count validation"
          echo "- ✅ Cross-platform compatibility (macOS & Linux)"
          echo "- ✅ Enhanced error reporting for troubleshooting"
          echo ""
          echo "### Performance Optimizations"
          echo "- 🚀 Consolidated duplicate test jobs"
          echo "- 🚀 Added Homebrew package caching"
          echo "- 🚀 Removed redundant Homebrew installation on macOS"
          echo "- 🚀 Reduced matrix from 3 to 2 OS versions"
          echo "- 📊 Added performance timing measurements"
          echo "- 🔍 Added detailed debugging information for failures"
        } >> "$GITHUB_STEP_SUMMARY"